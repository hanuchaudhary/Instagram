// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum accountType {
  private
  public
}

enum mediaType {
  image
  video
}

model User {
  id               String      @id @unique @default(uuid())
  username         String      @unique
  fullName         String
  email            String      @unique
  password         String
  avatar           String
  bio              String
  accountType      accountType
  posts            Post[]
  following        Following[]
  followers        Followers[]
  comment          Comment[]
  like             Like[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?
  verifyCode       String
  verifyCodeExpiry String
  isVerified       Boolean     @default(false)
  sentMessages     Message[]   @relation("SentMessages")
  receivedMessages Message[]   @relation("ReceivedMessages")
  Reels            Reels[]
}

model Message {
  id         Int      @id @unique @default(autoincrement())
  message    String
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId, createdAt])
}

model Followers {
  id        String   @id @unique @default(uuid())
  userId    String
  followId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, followId])
}

model Following {
  id        String   @id @unique @default(uuid())
  userId    String
  followId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, followId])
}

model Post {
  id        Int       @id @unique @default(autoincrement())
  caption   String
  location  String?
  mediaURL  String?
  mediaType mediaType @default(image)
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  Reels     Reels[]
}

model Reels {
  id        Int      @id @unique @default(autoincrement())
  caption   String
  mediaURL  String?
  postIds   Int[]
  post      Post     @relation(fields: [postIds], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  postId    Int
  comment   String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @unique @default(autoincrement())
  postId    Int
  isLiked   Boolean  @default(false)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
