// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportStatus {
  PENDING
  RESOLVED
}

enum ReportType {
  POST
  COMMENT
  USER
}

enum UserType {
  admin
  user
}

enum accountType {
  private
  public
}

enum mediaType {
  image
  video
}

model User {
  id                String      @id @unique @default(uuid())
  role              UserType    @default(user)
  username          String      @unique
  fullName          String
  email             String      @unique
  password          String
  avatar            String
  bio               String
  accountType       accountType
  posts             Post[]
  following         Following[]
  followers         Followers[]
  comment           Comment[]
  like              Like[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime?
  verifyCode        String
  verifyCodeExpiry  String
  isCodeVerified    Boolean     @default(false)
  isVerifiedAccount Boolean     @default(false)
  sentMessages      Message[]   @relation("SentMessages")
  receivedMessages  Message[]   @relation("ReceivedMessages")
  ReportMade        Report[]    @relation("ReportsMade")
  ReportRecieved    Report[]    @relation("ReportsReceived")
  Reel              Reel[]
}

model Message {
  id         Int      @id @unique @default(autoincrement())
  message    String
  image      String?
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId, createdAt])
}

model Followers {
  id        String   @id @unique @default(uuid())
  userId    String
  followId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, followId])
}

model Following {
  id        String   @id @unique @default(uuid())
  userId    String
  followId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, followId])
}

model Reel {
  id        Int      @id @default(autoincrement())
  caption   String
  mediaURL  String?
  postId    Int      @unique
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  caption   String
  location  String?
  mediaURL  String?
  mediaType mediaType @default(image)
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  comments  Comment[]
  likes     Like[]
  Reels     Reel[]
  createdAt DateTime  @default(now())
  Report    Report[]
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  postId    Int
  comment   String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @unique @default(autoincrement())
  postId    Int
  isLiked   Boolean  @default(false)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Report {
  id           Int          @id @default(autoincrement())
  reporterId   String
  reportedId   String
  postId       Int?
  reason       String
  status       ReportStatus @default(PENDING)
  type         ReportType
  reporter     User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reportedUser User         @relation("ReportsReceived", fields: [reportedId], references: [id])
  post         Post?        @relation(fields: [postId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())
}
