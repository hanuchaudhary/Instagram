# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?



<div className="w-1/3 border-r border-border p-4 flex flex-col">
        <Input type="text" placeholder="Search users..." className="mb-4" />
        <ScrollArea className="flex-1">
          {users.map((user) => (
            <div
              key={user.user.id}
              className={`p-3 mb-1 cursor-pointer dark:hover:bg-neutral-900 hover:bg-neutral-100 transition-colors duration-300 rounded-lg ${
                selectedUser?.id === user.user.id ? "bg-muted" : ""
              }`}
              onClick={() => handleSelectUser(user.user)}
            >
              <div className="flex items-center gap-2">
                <div className="relative">
                  <Avatar>
                    <AvatarImage
                      src={user.user.avatar}
                      alt={user.user.username}
                    />
                    <AvatarFallback>
                      {user.user.username.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  {onlineUsers.has(user.user.id) && (
                    <span className="absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-background" />
                  )}
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold">{user.user.username}</h3>
                </div>
              </div>
            </div>
          ))}
        </ScrollArea>
      </div>

      <div className="flex-1 flex flex-col">
        {selectedUser ? (
          <>
            <div className="p-4 border-b border-border">
              <div className="flex items-center gap-2">
                <h2 className="text-xl font-semibold">
                  {selectedUser.username}
                </h2>
                {onlineUsers.has(selectedUser.id) && (
                  <Badge variant="secondary" className="text-xs">
                    online
                  </Badge>
                )}
                {typingUsers.has(selectedUser.id) && (
                  <span className="text-sm text-muted-foreground">
                    typing...
                  </span>
                )}
              </div>
            </div>
            <ScrollArea className="flex-1 p-4">
              {error && (
                <div className="mb-4 p-2 bg-destructive/10 text-destructive text-center rounded">
                  {error}
                </div>
              )}
              {messages.length > 0 ? (
                messages.map((message, index) => (
                  <div
                    key={message.id || index}
                    className={`mb-2 ${
                      isCurrentUserMessage(message) ? "text-right" : "text-left"
                    }`}
                  >
                    <div
                      className={`inline-block p-2 rounded-lg ${
                        isCurrentUserMessage(message)
                          ? "bg-primary text-primary-foreground"
                          : "bg-muted"
                      }`}
                    >
                      <div className="font-semibold flex items-end gap-2">
                        <span>{message.message}</span>
                        <span className="text-[10px] text-neutral-500">
                          {message.createdAt &&
                            new Date(message.createdAt).toLocaleTimeString(
                              "en-US",
                              {
                                hour: "2-digit",
                                minute: "2-digit",
                                hour12: true,
                              }
                            )}
                        </span>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center text-muted-foreground">
                  No messages yet
                </div>
              )}
              <div ref={messagesEndRef} />
            </ScrollArea>
            <div className="p-4 border-t border-border">
              <div className="flex gap-2">
                <Input
                  type="text"
                  className="flex-1"
                  placeholder="Type a message..."
                  value={newMessage}

                  // onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                />
                {/* <Button onClick={handleSendMessage}>Send</Button> */}
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center text-muted-foreground">
            Select a user to start chatting
          </div>
        )}
      </div>